import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Andrew Gunderman
 * 
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int start = 0;
        int titleIndex = getChildElement(channel, "title");
        int descriptionIndex = getChildElement(channel, "description");
        int itemIndex = getChildElement(channel, "item");
        int linkIndex = getChildElement(channel, "link");
        
        out.println("<!DOCTYPE html>");
        out.println("<html>");
        // if there's no title print that
		if(channel.child(titleIndex).numberOfChildren() == 0)
		{
			out.println("<head>");
			out.println("<title> Empty Title </title>");
			out.println("<a href=" + channel.child(linkIndex).child(0) + "><h1>" + channel.child(titleIndex).child(0) + "</h1>");
			out.println("</head>");
		}
		// else print title
		else
		{
			out.println("<head>");
			out.println("<title>" + channel.child(titleIndex).child(0) + "</title>");
    		out.println("<a href=\"" + channel.child(linkIndex).child(0) +"\"><h1> " + channel.child(titleIndex).child(0) + "</h1></a>");
    		out.println("</head>");
		}
		
		// if no description
		if(channel.child(descriptionIndex).numberOfChildren() == 0)
		{
			out.println("<p>");
			out.println("No description");
			out.println("</p>");
		}
		// else print description
		else
		{
			out.println("<p>");
			out.println(channel.child(descriptionIndex).child(0));
			out.println("</p>");
		}    
		
		// print out basic setup for the table
		out.println("<table border=\"1\">");
		out.println("<tr>");
    	out.println("<th>Date</th>");
    	out.println("<th>Source</th>");
    	out.println("<th>News</th>");
    	out.println("</tr>");
    	
    	for(int i = 0; i < channel.numberOfChildren() - itemIndex; i++)
    	{
    		processItem(channel.child(itemIndex + i), out);
    	}
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // iterates through the tree's children to find one that matches the desired tag name
        for(int i = 0; i < xml.numberOfChildren(); i++)
        {
        	if(xml.child(i).label() == tag)
        	{
        		return i;
        	}
        }
        
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
    	
        // catch indexes of all the specific elements we'll need to clean up code
        int pubDateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int titleIndex = getChildElement(item, "title");
        int linkIndex = getChildElement(item, "link");
        int descriptionIndex = getChildElement(item, "description");
        
    	out.println("<tr>");
    	
    	// check the publication date, if we have it print if it not tell user
    	if(pubDateIndex == -1) 
    	{
    		out.println("<td>No date available</td>");
    	}
    	else
    	{
    		out.println("<td>" + item.child(pubDateIndex).child(0) + "</td>");
    	}
		
    	if(sourceIndex == -1)
    	{
    		out.println("<td>No source available</td>");
    	}
    	else
    	{
    		out.println("<td><a href = \"" + item.child(sourceIndex).attributeValue("url") + "\">" + item.child(sourceIndex) + "</a></td>");
    	}
		
    	if(titleIndex == -1 || item.child(titleIndex).toString() == "")
    	{
    		if(descriptionIndex == -1 || item.child(descriptionIndex).child(descriptionIndex).toString() == "")
    		{
    			out.println("<td>No title available</td>");
    		}
    		else
    		{
    			out.println("<td>" + item.child(descriptionIndex).child(0) + "</td>");
    		}
    	}
    	else
    	{
    		out.println("<td><a href = \"" + item.child(linkIndex).child(0) + "\">" + item.child(titleIndex).child(0) + "</a></td>");
    	}
		
		out.println("</tr>");
    }
    
    /**
     * 
     * @param xml - the xml tree
     * @param out the output stream
     * @return boolean which simply ensures that the xml tree is a valid RSS tree
     */
    private static boolean ensureValidRSSTree(XMLTree xml, SimpleWriter out){
    	boolean flag = false;
    	
    	if(xml.label() == "rss" && (xml.hasAttribute("version") && xml.attributeValue("version").contentEquals("2.0")));{
    		flag = true;;
    		
    	}
    	return flag;
    }
    
    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     * 
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
    */
    private static void processFeed(String url, String file, SimpleWriter out) 
    {
    	XMLTree rss = new XMLTree1(url);
    	
    	// make sure the rss tree is a valid rss tree
        if(!ensureValidRSSTree(rss, out))
        {
        	out.println("This is not a valid RSS Tree.");
        	return;
        }
        
        // print entire document to file
        outputHeader(rss.child(0), out);
        outputFooter(out);
        
    }
    
    // creates the top stories page content
    /**
     * 
     * @param xml the xml tree
     * @param out the simple writer object for that specific page
     */
    private static void createTopStoriesPage(XMLTree xml, SimpleWriter out)
    {
    	out.println("<!DOCTYPE html>");
    	out.println("<html>");
    	out.println("<head>");
    	out.println("<title>" + xml.attributeValue("title") + "</title>");
    	out.println("</head>");
    	out.println("<h1>" + xml.attributeValue("title") + "</h1>");
    	out.println("<ul>");
    	
    	// for each child (each feed) create the file, process the feed, and display the list item)
    	for(int i = 0; i < xml.numberOfChildren(); i++)
    	{
    		SimpleWriter newOut = new SimpleWriter1L("src/" + xml.child(i).attributeValue("file"));
    		processFeed(xml.child(i).attributeValue("url"), xml.child(i).attributeValue("file"), newOut);
    		out.println("<li><a href=\"" + xml.child(i).attributeValue("file") + "\">" + xml.child(i).attributeValue("name") + "</a></li>");
    		newOut.close();
    	}
    	
    	out.println("</ul>");
    	out.println("</html>");
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
    
        // suggested src/input.xml
        out.println("Please input the name of a valid XML file such as 'src/input.xml'.");
        String xmlFile = in.nextLine();
        
        // suggested src/output.html
        out.println("Please input the name of an output file such as 'src/output.html'.");
        String outputFileName = in.nextLine();
        
        SimpleWriter outFile = new SimpleWriter1L(outputFileName); // change this value to var above later
        
        XMLTree xml = new XMLTree1(xmlFile);
        
        createTopStoriesPage(xml, outFile);
        
        in.close();
        out.close();
    }

}